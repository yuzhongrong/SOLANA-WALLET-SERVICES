const GetProgramAccounts = {"body":{"type":"object","properties":{"id":{"type":"integer","default":1},"jsonrpc":{"type":"string","default":"2.0"},"method":{"default":"getProgramAccounts","type":"string"},"params":{"type":"array","prefixItems":{"oneOf":[{"type":"string","description":"Base-58 Encoded sStrings - Pubkey of program."},{"type":"object","properties":{"encoding":{"type":"string","description":"Data encoding for each returned transaction.\nAccepts one of the following strings:\n[\"json\" (Default), \"jsonParsed\", \"base58\" (slow), \"base64\"]\n\"jsonParsed\" encoding attempts to use program-specific parsers to make the transaction.message.instructions list more human-readable; if a parser cannot be found, the instruction falls back to default JSON.\n","default":"json","enum":["json","jsonParsed","base58","base64"]},"dataSlice":{"type":"object","description":"Limits the returned account data using the provided offset: <usize> and length: <usize> fields\nOnly available for \"base58\", \"base64\" or \"base64+zstd\" encodings.\n"},"filters":{"type":"array","description":"Array - Filter results using various filter objects; account must meet all filter criteria to be included in results.","items":{"type":"object","properties":{"memcmp":{"type":"object","description":"Compares a provided series of bytes with program account data at a particular offset.","properties":{"offset":{"type":"integer","description":"An offset into program account data to start comparison."},"bytes":{"type":"string","description":"String - Data to match, as base-58 encoded string and limited to less than 129 bytes."}}},"dataSize":{"type":"integer","format":"int64","description":"Compares the program account data length with the provided data size."}}}},"withContext":{"type":"boolean","description":"Wrap the result in an RpcResponse JSON object."},"minContextSlot":{"type":"number","default":165768577,"description":"Set the minimum slot that the request can be evaluated at."}}}]},"items":{"oneOf":[{"type":"string","description":"Base-58 Encoded sStrings - Pubkey of program."},{"type":"object","properties":{"encoding":{"type":"string","description":"Data encoding for each returned transaction.\nAccepts one of the following strings:\n[\"json\" (Default), \"jsonParsed\", \"base58\" (slow), \"base64\"]\n\"jsonParsed\" encoding attempts to use program-specific parsers to make the transaction.message.instructions list more human-readable; if a parser cannot be found, the instruction falls back to default JSON.\n\nDefault: `json`","default":"json","enum":["json","jsonParsed","base58","base64"]},"dataSlice":{"type":"object","description":"Limits the returned account data using the provided offset: <usize> and length: <usize> fields\nOnly available for \"base58\", \"base64\" or \"base64+zstd\" encodings.\n","additionalProperties":true},"filters":{"type":"array","description":"Array - Filter results using various filter objects; account must meet all filter criteria to be included in results.","items":{"type":"object","properties":{"memcmp":{"type":"object","description":"Compares a provided series of bytes with program account data at a particular offset.","properties":{"offset":{"type":"integer","description":"An offset into program account data to start comparison."},"bytes":{"type":"string","description":"String - Data to match, as base-58 encoded string and limited to less than 129 bytes."}}},"dataSize":{"type":"integer","format":"int64","description":"Compares the program account data length with the provided data size.","minimum":-9223372036854776000,"maximum":9223372036854776000}}}},"withContext":{"type":"boolean","description":"Wrap the result in an RpcResponse JSON object."},"minContextSlot":{"type":"number","default":165768577,"description":"Set the minimum slot that the request can be evaluated at."}}}]}}},"$schema":"https://json-schema.org/draft/2020-12/schema#"},"metadata":{"allOf":[{"type":"object","properties":{"apiKey":{"type":"string","default":"docs-demo","description":"<style>\n  .custom-style {\n    color: #048FF4;\n  }\n</style>\nFor higher throughput, <span class=\"custom-style\"><a href=\"https://alchemy.com/?a=docs-demo\" target=\"_blank\">create your own API key</a></span>\n","$schema":"https://json-schema.org/draft/2020-12/schema#"}},"required":["apiKey"]}]},"response":{"200":{"type":["object","null"],"properties":{"id":{"type":"integer"},"jsonrpc":{"type":"string"},"result":{"type":"object","description":"A JSON object.","properties":{"pubkey":{"type":"string","description":"Base-58 Encoded String - The account Pubkey."},"account":{"type":"object","properties":{"lamports":{"type":"integer","format":"int64","description":"u64 - Number of lamports assigned to this account.","minimum":-9223372036854776000,"maximum":9223372036854776000},"owner":{"type":"string","description":"Base-58 Encoded String - Pubkey of the program this account has been assigned to."},"data":{"description":"[string, encoding]|object - Data associated with the account, either as encoded binary data or JSON format {<program>: <state>}, depending on encoding parameter.\n","type":"array","prefixItems":{"oneOf:data":[{"type":"string"},{"type":"object"}]},"items":{"oneOf:data":[{"type":"string"},{"type":"object"}]}},"executable":{"type":"boolean","description":"Indicates if the account contains a program (and is strictly read-only)."},"rentEpoch":{"type":"integer","description":"u64, The epoch at which this account will next owe rent."}}}}}},"$schema":"https://json-schema.org/draft/2020-12/schema#"}}} as const
;
export { GetProgramAccounts }
